open Constants

type ctrlLimits = {
    throttleMax : float;
    throttleMin : float;
    elevatorMaxDeg : float;
    elevatorMinDeg : float;
    aileronMaxDeg : float;
    aileronMinDeg : float;
    rudderMaxDeg : float;
    rudderMinDeg : float;
    maxBankDeg : float;
    nzMax : float;
    nzMin : float;
}

let defaultCtrlLimits = {
    throttleMax = 1.;
    throttleMin = 0.;
    elevatorMaxDeg = 25.;
    elevatorMinDeg = -25.;
    aileronMaxDeg = 21.5;
    aileronMinDeg = -21.5;
    rudderMaxDeg = 30.;
    rudderMinDeg = -30.;
    maxBankDeg = 60.;
    nzMax = 6.;
    nzMin = -1.;
}

let string_of_ctrl_limits ctrl_limits =
    "{ " ^
    "throttleMax = " ^ (string_of_float ctrl_limits.throttleMax) ^ "; " ^
    "throttleMin = " ^ (string_of_float ctrl_limits.throttleMin) ^ "; " ^
    "elevatorMaxDeg = " ^ (string_of_float ctrl_limits.elevatorMaxDeg) ^ "; " ^
    "elevatorMinDeg = " ^ (string_of_float ctrl_limits.elevatorMinDeg) ^ "; " ^
    "aileronMaxDeg = " ^ (string_of_float ctrl_limits.aileronMaxDeg) ^ "; " ^
    "aileronMinDeg = " ^ (string_of_float ctrl_limits.aileronMinDeg) ^ "; " ^
    "rudderMaxDeg = " ^ (string_of_float ctrl_limits.rudderMaxDeg) ^ "; " ^
    "rudderMinDeg = " ^ (string_of_float ctrl_limits.rudderMinDeg) ^ "; " ^
    "maxBankDeg = " ^ (string_of_float ctrl_limits.maxBankDeg) ^ "; " ^
    "nzMax = " ^ (string_of_float ctrl_limits.nzMax) ^ "; " ^
    "nzMin = " ^ (string_of_float ctrl_limits.nzMin) ^
    " }"

type f16_state = {
    vt : float; alpha : float; beta : float; phi : float; theta : float;
    psi : float; p : float; q : float; r : float; x9 : float;
    x10 : float; alt : float; power : float;
}

let string_of_f16_state state =
    "{ " ^
    "vt = " ^ (string_of_float state.vt) ^ "; " ^
    "alpha = " ^ (string_of_float (state.alpha /. pi)) ^ "π; " ^
    "beta = " ^ (string_of_float (state.beta /. pi)) ^ "π; " ^
    "phi = " ^ (string_of_float (state.phi /. pi)) ^ "π; " ^
    "theta = " ^ (string_of_float (state.theta /. pi)) ^ "π; " ^
    "psi = " ^ (string_of_float (state.psi /. pi)) ^ "π; " ^
    "P = " ^ (string_of_float state.p) ^ "; " ^
    "Q = " ^ (string_of_float state.q) ^ "; " ^
    "R = " ^ (string_of_float state.r) ^ "; " ^
    "x9 = " ^ (string_of_float state.x9) ^ "; " ^
    "x10 = " ^ (string_of_float state.x10) ^ "; " ^
    "altitude = " ^ (string_of_float state.alt) ^ "; " ^
    "power = " ^ (string_of_float state.power) ^
    " }"

let json_of_f16_state state =
    "{" ^
    "\"vt\":" ^ (string_of_float state.vt) ^ "," ^
    "\"alpha\":" ^ (string_of_float state.alpha) ^ "," ^
    "\"beta\":" ^ (string_of_float state.beta) ^ "," ^
    "\"phi\":" ^ (string_of_float state.phi) ^ "," ^
    "\"theta\":" ^ (string_of_float state.theta) ^ "," ^
    "\"psi\":" ^ (string_of_float state.psi) ^ "," ^
    "\"P\":" ^ (string_of_float state.p) ^ "," ^
    "\"Q\":" ^ (string_of_float state.q) ^ "," ^
    "\"R\":" ^ (string_of_float state.r) ^ "," ^
    "\"x9\":" ^ (string_of_float state.x9) ^ "," ^
    "\"x10\":" ^ (string_of_float state.x10) ^ "," ^
    "\"altitude\":" ^ (string_of_float state.alt) ^ "," ^
    "\"power\":" ^ (string_of_float state.power) ^
    "}"

type solver_state = {
    f16 : f16_state;
    nz : float; ps : float; ny_r : float;
}

let string_of_state state =
    "{ " ^
    "f16_state = " ^ (string_of_f16_state state.f16) ^ "; " ^
    "nz = " ^ (string_of_float state.nz) ^ "; " ^
    "ps = " ^ (string_of_float state.ps) ^ "; " ^
    "ny_r = " ^ (string_of_float state.ny_r) ^
    " }"

let json_of_state state =
    "{" ^
    "\"f16_state\":" ^ (json_of_f16_state state.f16) ^ "," ^
    "\"nz\":" ^ (string_of_float state.nz) ^ "," ^
    "\"ps\":" ^ (string_of_float state.ps) ^ "," ^
    "\"ny_r\":" ^ (string_of_float state.ny_r) ^
    "}"

type input = { thtlc : float; el : float; ail : float; rdr: float; }

let string_of_input input =
    "{ " ^
    "thtlc = " ^ (string_of_float input.thtlc) ^ "; " ^
    "el = " ^ (string_of_float input.el) ^ "; " ^
    "ail = " ^ (string_of_float input.ail) ^ "; " ^
    "rdr = " ^ (string_of_float input.rdr) ^
    " }"

type ref_ctrl = {
    thtlc_ref : float; nz_ref : float; ps_ref : float; ny_r_ref : float
}

let string_of_ref_ctrl ref_ctrl =
    "{ " ^
    "thtlc_ref = " ^ (string_of_float ref_ctrl.thtlc_ref) ^ "; " ^
    "nz_ref = " ^ (string_of_float ref_ctrl.nz_ref) ^ "; " ^
    "ps_ref = " ^ (string_of_float ref_ctrl.ps_ref) ^ "; " ^
    "ny_r_ref = " ^ (string_of_float ref_ctrl.ny_r_ref) ^
    " }"
