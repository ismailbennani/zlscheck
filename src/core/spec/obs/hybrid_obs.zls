let static q_true = infinity
let static q_false = neg_infinity

hybrid no_signal () = present up(-1.) -> ()
hybrid now () = present (init) -> ()

discrete isTrue p = p >= 0.
discrete isFalse p = p < 0.

hybrid q_istrue p =
    present (init) on (isTrue p) | up(p) | (disc p) on (isTrue p) -> ()
hybrid q_isfalse p =
    present (init) on (isFalse p) | up(-.p) | (disc p) on (isFalse p) -> ()

hybrid ignore_first_instant s =
    let first = present (init) -> true else false in
    present s(x) on (not first) -> x

hybrid freeze p = let init res = p in res

hybrid q_istrue_now p = freeze (q_istrue p)
hybrid q_isfalse_now p = freeze (q_isfalse p)

let q_gt (p1, p2) = p1 -. p2
let q_ge (p1, p2) = p1 -. p2
let q_lt (p1, p2) = p2 -. p1
let q_le (p1, p2) = p2 -. p1

let q_not p = -. p
let q_or (p1, p2) = max p1 p2
let q_and (p1, p2) = min p1 p2

(* x1 =_precision x2 <=> abs(x1 - x2) < precision *)
let q_eq precision (x1, x2) = precision -. (abs_float (x1 -. x2))

let q_eqi (i1, i2) = q_eq 0.5 (i1, i2)

let implies (a, b) = q_or(q_not a, b)

hybrid q_up p =
    present (q_istrue p)() -> p
    else min (-1e-10) (-. (abs_float p))

node b_up p = p -> (not (pre p) && p)

let static min_cpt = -1.

(* HELPERS *)

let static eps = 0.1

hybrid acc f eps s = cur_f where
    rec init cur_f = s
    and der t = 1. init 0.
    and present
        | up((cur_f -. eps) -. s) | up(s -. (cur_f +. eps)) | (disc s)
        | up(s) | up(-.s) ->
            do cur_f = f ((last cur_f), s) done

(* CONTINUOUS OBSERVERS *)

hybrid counter delay (strt, rst) = res where
    automaton
    | Stop -> do init res = delay unless strt () then Count
    | Count -> do der res = -1. init delay unless rst () then Stop

hybrid always p = acc q_and eps p
hybrid never p = always (q_not p)
hybrid once p = acc q_or eps p

(*  X since first Y : X est a été vrai au moins une fois depuis le premier instant
        où Y a été vrai (inclus)
    X since last Y : X est a été vrai au moins une fois depuis le dernier instant
        où Y a été vrai (inclus) *)
hybrid sincefirst (x, y) =
    let nevery = never y in
    automaton
    | INIT -> do q_or (nevery, x) until (q_istrue y)() then YTRUE
    | YTRUE -> do q_or (nevery, once x) done
hybrid sincelast (x, y) =
    let nevery = never y in
    automaton
    | INIT -> do q_or (nevery, x) until (q_istrue y)() then YTRUE
    | YTRUE -> do x until (q_isfalse y)() then YFALSE(x)
    | YFALSE(last_res) ->
        do q_or (last_res, once x) until (q_istrue y)() then YTRUE
hybrid since (x, y) = sincelast (x, y)

(* onceBfromlastAtoC :

   entre le premier instant où a a été vraie (inclus)
   et le dernier instant où c a été vraie (inclus),
   b a été vraie au moins une fois

   code de onceBfromlastAtoC pris dans
   Synchronous Programming of Reactive Systems - Nicolas Halbwachs *)
hybrid onceBfromlastAtoC(a, b, c) = implies(c, q_or (never a, sincelast(b, a)))
hybrid onceBfromfirstAtoC(a, b, c) = implies(c, q_or (never a, sincefirst(b, a)))
hybrid onceBfromAtoC(a, b, c) = onceBfromlastAtoC(a, b, c)

hybrid alwaysBfromlastAtoC(a, b, c) =
    implies (c, q_or (never a, q_not (sincelast (q_not b, a))))
hybrid alwaysBfromfirstAtoC (a, b, c) =
    implies (c, q_or (never a, q_not (sincefirst (q_not b, a))))
hybrid alwaysBfromAtoC (a, b, c) = alwaysBfromlastAtoC(a, b, c)

hybrid neverBfromlastAtoC (a, b, c) = alwaysBfromlastAtoC(a, q_not b, c)
hybrid neverBfromfirstAtoC (a, b, c) = alwaysBfromfirstAtoC(a, q_not b, c)
hybrid neverBfromAtoC (a, b, c) = alwaysBfromAtoC(a, q_not b, c)

hybrid horizon delay () =
    let cpt = counter delay (now (), no_signal ()) in
    q_up (q_lt (cpt, 0.))

hybrid once_timed delay p = res where
    rec der t = 1. init 0.
    and automaton
    | I -> do res = once p until up(t -. delay) then Done(res)
    | Done(last_res) -> do res = last_res done
hybrid always_timed delay p = res where
    rec der t = 1. init 0.
    and automaton
    | I -> do res = always p until up(t -. delay) then Done(res)
    | Done(last_res) -> do res = last_res done
hybrid never_timed delay p = always_timed delay (q_not p)

(* Autre façon de les écrire (plus naturelle) mais qui donne une robustesse
   moins intéressante selon moi. En particulier, avec cette version,
   la sortie du noeud n'est pas fausse le plus tôt possible. Elle devient
   fausse une fois que le compteur est à 0

    hybrid always_timed delay p =
        alwaysBfromAtoC(q_true fby q_false, p, horizon delay *)

hybrid onceBfromlastA (a, b) = q_or (never a, sincelast (b, a))
hybrid onceBfromfirstA (a, b) = q_or (never a, sincefirst (b, a))
hybrid onceBfromA (a, b) = onceBfromlastA (a, b)

hybrid alwaysBfromlastA (a, b) = q_or (never a, q_not (sincelast (q_not b, a)))
hybrid alwaysBfromfirstA (a, b) = q_or (never a, q_not (sincefirst (q_not b, a)))
hybrid alwaysBfromA (a, b) = alwaysBfromlastA(a, b)

hybrid neverBfromlastA (a, b) = alwaysBfromlastA (a, q_not b)
hybrid neverBfromfirstA (a, b) = alwaysBfromfirstA (a, q_not b)
hybrid neverBfromA (a, b) = neverBfromlastA (a, b)

(* onceBfromlastA_timed delay

   durant delay secondes après le premier instant où A a été vrai (inclus),
   b a été vrai au moins une fois

   Note: différent de "chaque ocurence de a est suivie d'une occurence de b
         après moins de t secondes" *)
hybrid onceBfromlastA_timed delay (a, b) =
    let cpt = counter delay (q_isfalse a, q_istrue a) in
    q_or (never a,
          onceBfromlastAtoC (a, b, q_lt (cpt, 0.)))
hybrid onceBfromfirstA_timed delay (a, b) =
    let cpt = counter delay (q_istrue (once a), no_signal ()) in
    q_or (never a,
          onceBfromfirstAtoC (a, b, q_lt (cpt, 0.)))
hybrid onceBfromA_timed delay (a, b) =
    onceBfromlastA_timed delay (a, b)

hybrid alwaysBfromlastA_timed delay (a, b) =
    let cpt = counter delay (q_isfalse a, q_istrue a) in
    q_or (never a,
          implies (q_gt (cpt, 0.), q_not (sincelast (q_not b, a))))
hybrid alwaysBfromfirstA_timed delay (a, b) =
    let cpt = counter delay (q_istrue (once a), no_signal ()) in
    q_or (never a,
          implies (q_gt (cpt, 0.), q_not (sincefirst (q_not b, a))))
hybrid alwaysBfromA_timed delay (a, b) =
    alwaysBfromlastA_timed delay (a, b)

(*
    De même que always_timed

    hybrid alwaysBfromlastA_timed delay (a, b) =
        alwaysBfromlastAtoC (a, b, horizon_triggered delay (q_istrue a))

    hybrid alwaysBfromfirstA_timed delay (a, b) =
        alwaysBfromfirstAtoC (a, b,
            horizon_triggered delay (q_istrue (q_up (once a))))
*)

hybrid neverBfromlastA_timed delay (a, b) =
    alwaysBfromlastA_timed delay (a, q_not b)
hybrid neverBfromfirstA_timed delay (a, b) =
    alwaysBfromfirstA_timed delay (a, q_not b)
hybrid neverBfromA_timed delay (a, b) =
    neverBfromlastA_timed delay (a, b)
