module F = Extended_FAD_float

type 'a option = | None | Some of 'a

type op_t = F.t

let make = F.make
let get = F.get
let scale = F.scale
let translate = F.translate
let ( !! ) = F.( !! )
let diff = F.diff
let deriv = F.deriv
let d = F.d
let ( = ) = Stdlib.( = )
let ( <> ) = Stdlib.( <> )
let ( < ) = Stdlib.( < )
let ( > ) = Stdlib.( > )
let ( <= ) = Stdlib.( <= )
let ( >= ) = Stdlib.( >= )
let compare = Stdlib.compare
let min = Stdlib.min
let max  = Stdlib.max
let ( == ) = Stdlib.( == )
let ( != ) = Stdlib.( != )
let ( =@ ) = F.( = )
let ( <>@ ) = F.( <> )
let ( <@ ) = F.( < )
let ( >@ ) = F.( > )
let ( <=@ ) = F.( <= )
let ( >=@ ) = F.( >= )
let min_op = F.min
let max_op = F.max
let not = Stdlib.not
let ( && ) = Stdlib.( && )
let ( & ) = Stdlib.( & )
let ( || ) = Stdlib.( || )
let ( or ) = Stdlib.( or )
let ( ~- ) = Stdlib.( ~- )
let succ = Stdlib.succ
let pred = Stdlib.pred
let ( + ) = Stdlib.( + )
let ( - ) = Stdlib.( - )
let ( * ) = Stdlib.( * )
let ( / ) = Stdlib.( / )
let ( mod ) = Stdlib.( mod )
let abs = Stdlib.abs
let max_int = Stdlib.max_int
let min_int = Stdlib.min_int
let ( land ) = Stdlib.( land )
let ( lor ) = Stdlib.( lor )
let ( lxor ) = Stdlib.( lxor )
let lnot = Stdlib.lnot
let ( lsl ) = Stdlib.( lsl )
let ( lsr ) = Stdlib.( lsr )
let ( asr ) = Stdlib.( asr )
let ( ~-. ) = F.( ~- )
let ( +. ) = F.( + )
let ( -. ) = F.( - )
let ( *. ) = F.( * )
let ( /. ) = F.( / )
let ( ** ) = F.( ** )
let sqrt = F.sqrt
let exp = F.exp
let log = F.log
(* let log10 = F.log10 *)
let cos = F.cos
let sin = F.sin
let tan = F.tan
let acos = F.acos
let asin = F.asin
let atan = F.atan
(* let atan2 = F.atan2 *)
(* let cosh = F.cosh *)
(* let sinh = F.sinh *)
(* let tanh = F.tanh *)
(* let ceil = F.ceil *)
let floor = F.floor
(* let abs_op = F.abs *)
(* let op_abs = F.abs *)
let mod_op = F.modf
let modf = F.modf
let frexp = F.frexp
let ldexp = F.ldexp
let make_int = F.integer
let op_of_int = F.integer
let truncate = F.truncate
let int_of_op = F.truncate
let infinity = F.infinity
let neg_infinity = F.neg_infinity
let nan = F.nan
let max_op_t = F.max_val
let min_op_t = F.min_val
let epsilon_op = F.epsilon
type fpclass = Stdlib.fpclass
let classify_op = F.classify
let ( ^ ) = Stdlib.( ^ )
let int_of_char = Stdlib.int_of_char
let char_of_int = Stdlib.char_of_int
let ignore = Stdlib.ignore
let string_of_bool = Stdlib.string_of_bool
let bool_of_string = Stdlib.bool_of_string
let string_of_int = Stdlib.string_of_int
let int_of_string = Stdlib.int_of_string
let string_of_op = F.to_string
let op_of_string = F.of_string
let fst = Stdlib.fst
let snd = Stdlib.snd
type in_channel = Stdlib.in_channel
type out_channel = Stdlib.out_channel
let stdin = Stdlib.stdin
let stdout = Stdlib.stdout
let stderr = Stdlib.stderr
let print_char = Stdlib.print_char
let print_string = Stdlib.print_string
let print_int = Stdlib.print_int
let print_op = F.print
let print_endline = Stdlib.print_endline
let print_newline = Stdlib.print_newline
let prerr_char = Stdlib.prerr_char
let prerr_string = Stdlib.prerr_string
let prerr_int = Stdlib.prerr_int
let prerr_op = F.prerr
let prerr_endline = Stdlib.prerr_endline
let prerr_newline = Stdlib.prerr_newline
let read_line = Stdlib.read_line
let read_int = Stdlib.read_int
let read_op = F.read
type open_flag = Stdlib.open_flag
let open_out = Stdlib.open_out
let open_out_bin = Stdlib.open_out_bin
let open_out_gen = Stdlib.open_out_gen
let flush = Stdlib.flush
let flush_all = Stdlib.flush_all
let output_char = Stdlib.output_char
let output_string = Stdlib.output_string
let output = Stdlib.output
let output_byte = Stdlib.output_byte
let output_binary_int = Stdlib.output_binary_int
let output_value = Stdlib.output_value
let seek_out = Stdlib.seek_out
let pos_out = Stdlib.pos_out
let out_channel_length = Stdlib.out_channel_length
let close_out = Stdlib.close_out
let close_out_noerr = Stdlib.close_out_noerr
let set_binary_mode_out = Stdlib.set_binary_mode_out
let open_in = Stdlib.open_in
let open_in_bin = Stdlib.open_in_bin
let open_in_gen = Stdlib.open_in_gen
let input_char = Stdlib.input_char
let input_line = Stdlib.input_line
let input = Stdlib.input
let really_input = Stdlib.really_input
let input_byte = Stdlib.input_byte
let input_binary_int = Stdlib.input_binary_int
let input_value = Stdlib.input_value
let seek_in = Stdlib.seek_in
let pos_in = Stdlib.pos_in
let in_channel_length = Stdlib.in_channel_length
let close_in = Stdlib.close_in
let close_in_noerr = Stdlib.close_in_noerr
let set_binary_mode_in = Stdlib.set_binary_mode_in
let failwith = Stdlib.failwith
