open Constants
open F16_types
open Scope
open MyOp

(* for printing and drawing *)
let static tstep = 0.01

(* initial cond (paper):
    roll: [0.2pi, 0.2833pi] = [0.6283, 0.8900]
    pitch: [-0.5pi, -0.54pi] = [-1.5708, -1.6965]
    yaw: [0.25pi, 0.375pi] = [0.7854, 1.1781]
*)
(* initial cond (staliro):
    roll: [0.2pi, 0.2833pi] = [0.6283, 0.8901]
    pitch: [-0.4pi, -0.35pi] = [-1.2566, -1.0996]
    yaw: [-0.375pi, -0.125pi] = [-1.1781, -0.3927]
*)

let node print_state (t, s) =
    let init tmp =
        print_endline "t\tvt\talpha\tbeta\tphi\ttheta\tpsi\tp\tq\tr\tpn\tpe\th\tpow\tint-e-Nz\tint-e-ps\tint-e-Ny-r"
    in
    print_float (get t); print_string "\t";
    print_float (get s.f16.vt); print_string "\t";
    print_float (get s.f16.alpha); print_string "\t";
    print_float (get s.f16.beta); print_string "\t";
    print_float (get s.f16.phi); print_string "\t";
    print_float (get s.f16.theta); print_string "\t";
    print_float (get s.f16.psi); print_string "\t";
    print_float (get s.f16.p); print_string "\t";
    print_float (get s.f16.q); print_string "\t";
    print_float (get s.f16.r); print_string "\t";
    print_float (get s.f16.x9); print_string "\t";
    print_float (get s.f16.x10); print_string "\t";
    print_float (get s.f16.alt); print_string "\t";
    print_float (get s.f16.power); print_string "\t";
    print_float (get s.nz); print_string "\t";
    print_float (get s.ps); print_string "\t";
    print_float (get s.ny_r); print_string "\t";
    print_newline ()

let node run_model () =
    let initial_cond = {
        f16 = {
            vt = make 540.;
            alpha = scale dtor 2.1215; beta = make 0.;
            (* phi = 1.61686455757; theta = -0.347990119426; psi = -1.06805421104; *)
            phi = scale pi 0.25; theta = scale pi (-0.38); psi = scale pi (-0.3);
            p = make 0.; q = make 0.; r = make 0.;
            x9 = make 0.; x10 = make 0.;
            alt = make 4040.; power = make 9.;
        };
        nz = make 0.; ps = make 0.; ny_r = make 0.;
    } in
    let ctrlLimits = defaultCtrlLimits in

    let u, u_ref, state, state_der =
        Controlledf16.model (make tstep, initial_cond, ctrlLimits) in
    u, state, state_der
