open MyOp
open Wt_common

(* all these parameters are taken from
   benchmarks/wind-turbine/SimplifiedTurbine_ParameterFile.m *)

type vscontrol = {
    rgn3MP  : MyOp.t; (* Minimum pitch angle at which the torque is computed as if we are in region 3 regardless of the generator speed, rad. -- chosen to be 1.0 degree above PC_MinPit *)
    ctInSp  : MyOp.t; (* Transitional generator speed (HSS side) between regions 1 and 1 1/2, rad/s. *)
    maxRat  : MyOp.t; (* Maximum torque rate (in absolute value) in torque controller, N-m/s. *)
    maxTq   : MyOp.t; (* Maximum generator torque in Region 3 (HSS side), N-m. -- chosen to be 10% above VS_RtTq = 43.09355kNm *)
    rgn2K   : MyOp.t; (* Generator torque constant in Region 2 (HSS side), N-m/(rad/s)^2. *)
    rgn2Sp  : MyOp.t; (* Transitional generator speed (HSS side) between regions 1 1/2 and 2, rad/s. *)
    rtGnSp  : MyOp.t; (* Rated generator speed (HSS side), rad/s. -- chosen to be 99% of PC_RefSpd *)
    rtPwr   : MyOp.t; (* Rated generator generator power in Region 3, Watts. -- chosen to be 5MW divided by the electrical generator efficiency of 94.4% *)
    slPc    : MyOp.t; (* Rated generator slip percentage in Region 2 1/2, %. *)
    sySp    : MyOp.t;
    slope15 : MyOp.t;
    slope25 : MyOp.t;
    trGnSp  : MyOp.t;
    vs_filterConstant : MyOp.t;
}

let string_of_vscontrol (prefix, vsctrl) =
    "{\n" ^
    (prefix ^ "  rgn3MP: " ^ (to_string vsctrl.rgn3MP) ^ ";\n") ^
    (prefix ^ "  ctInSp: " ^ (to_string vsctrl.ctInSp) ^ ";\n") ^
    (prefix ^ "  maxRat: " ^ (to_string vsctrl.maxRat) ^ ";\n") ^
    (prefix ^ "  maxTq: " ^ (to_string vsctrl.maxTq) ^ ";\n") ^
    (prefix ^ "  rgn2K: " ^ (to_string vsctrl.rgn2K) ^ ";\n") ^
    (prefix ^ "  rgn2Sp: " ^ (to_string vsctrl.rgn2Sp) ^ ";\n") ^
    (prefix ^ "  rtGnSp: " ^ (to_string vsctrl.rtGnSp) ^ ";\n") ^
    (prefix ^ "  rtPwr: " ^ (to_string vsctrl.rtPwr) ^ ";\n") ^
    (prefix ^ "  slPc: " ^ (to_string vsctrl.slPc) ^ ";\n") ^
    (prefix ^ "  sySp: " ^ (to_string vsctrl.sySp) ^ ";\n") ^
    (prefix ^ "  slope15: " ^ (to_string vsctrl.slope15) ^ ";\n") ^
    (prefix ^ "  slope25: " ^ (to_string vsctrl.slope25) ^ ";\n") ^
    (prefix ^ "  trGnSp: " ^ (to_string vsctrl.trGnSp) ^ ";\n") ^
    (prefix ^ "  vs_filterConstant: " ^ (to_string vsctrl.vs_filterConstant) ^ ";\n") ^
    prefix ^ "}"

type cpc = {
    gS_factor : MyOp.t;
    kI : MyOp.t;
    kP : MyOp.t;
    tI : MyOp.t;
    antiWindUp : MyOp.t;
}

let string_of_cpc (prefix, cpc) =
    "{\n" ^
    (prefix ^ "  gS_factor: " ^ (to_string cpc.gS_factor) ^ ";\n") ^
    (prefix ^ "  kI: " ^ (to_string cpc.kI) ^ ";\n") ^
    (prefix ^ "  kP: " ^ (to_string cpc.kP) ^ ";\n") ^
    (prefix ^ "  tI: " ^ (to_string cpc.tI) ^ ";\n") ^
    (prefix ^ "  antiWindUp: " ^ (to_string cpc.antiWindUp) ^ ";\n") ^
    prefix ^ "}"

type pitch = {
    omega     : MyOp.t; (* rad/s undamped natural frequency of the blade pitch actuator *)
    xi        : MyOp.t; (* -     damping factor of the blade pitch actuator *)
    delay     : MyOp.t; (* s     pitch delay (matlab risetime of second order lag) *)
    rateLimit : MyOp.t; (* [rad/s] *)
    max       : MyOp.t; (* [rad] *)
    min       : MyOp.t; (* [rad] *)
    theta0    : MyOp.t;
    thetaDot0 : MyOp.t;
    actuatorType : int;
    pitch_filterConstant : MyOp.t;
    cpc : cpc;
}

let string_of_pitch (prefix, pitch) =
    "{\n" ^
    (prefix ^ "  omega: " ^ (to_string pitch.omega) ^ ";\n") ^
    (prefix ^ "  xi: " ^ (to_string pitch.xi) ^ ";\n") ^
    (prefix ^ "  delay: " ^ (to_string pitch.delay) ^ ";\n") ^
    (prefix ^ "  rateLimit: " ^ (to_string pitch.rateLimit) ^ ";\n") ^
    (prefix ^ "  max: " ^ (to_string pitch.max) ^ ";\n") ^
    (prefix ^ "  min: " ^ (to_string pitch.min) ^ ";\n") ^
    (prefix ^ "  theta0: " ^ (to_string pitch.theta0) ^ ";\n") ^
    (prefix ^ "  thetaDot0: " ^ (to_string pitch.thetaDot0) ^ ";\n") ^
    (prefix ^ "  actuatorType: " ^ (string_of_int pitch.actuatorType) ^ ";\n") ^
    (prefix ^ "  pitch_filterConstant: " ^ (to_string pitch.pitch_filterConstant) ^ ";\n") ^
    (prefix ^ "  cpc: " ^ (string_of_cpc (prefix ^ "  ", pitch.cpc)) ^ ";\n") ^
    prefix ^ "}"

type params = {
    (* global constants *)
    rho          : MyOp.t; (* kg/m^3 air density *)
    rotor        : MyOp.t; (* m      rotor *)
    lambda_opt   : MyOp.t; (* -      tip speed ratio *)
    omega_rated  : MyOp.t; (* rpm *)
    wind_rated   : MyOp.t;
    eta          : MyOp.t;

    (* fore-aft tower dynamics *)
    h_H : MyOp.t; (* m  Hub height *)
    m_T : MyOp.t; (* kg Mass Tower + Monopile (Support Shallow) *)
    m_N : MyOp.t; (* kg Mass Nacelle *)
    m_H : MyOp.t; (* kg Mass Hub *)
    m_B : MyOp.t; (* kg Mass Blade *)
    f_0 : MyOp.t; (* Hz naturall frequency 1st Tower FA *)
    d_s : MyOp.t; (* - *)
    mTe : MyOp.t; (* kg     tower equivalent modal mass ([Gasch] p.294) *)
    cTe : MyOp.t; (* kg/s   tower structual damping (sigma=C_T/(2M_T)=D*w_0, w_0=f_0*2*pi, [Gasch] p.294) *)
    kTe : MyOp.t; (* kg/s^2 tower bending stiffness (w_0=sqrt(K_T/M_T),[Gasch] p.294) *)

    (* drive train dynamics *)
    j_H     : MyOp.t; (* kgm^2 Hub Inertia About Shaft Axis *)
    j_B     : MyOp.t; (* kgm^2 Second Mass Moment of Inertia (w.r.t. Root) *)
    j_G     : MyOp.t; (* kgm^2 Generator Inertia About High-Speed Shaft *)
    gBRatio : MyOp.t; (* -     Gearbox ratio *)
    inertia : MyOp.t; (* kgm^2 sum of the moments of inertia about the rotation axis of the rotor hub and blades *)
    omega_g_rated : MyOp.t;

    (* initial conds for integrators *)
    xt_dot0  : MyOp.t;
    xT0      : MyOp.t;
    omega0   : MyOp.t;
    omega_g0 : MyOp.t;

    (* VS Control (Paramters taken from DISCON.f90) *)
    genEff    : MyOp.t;
    vscontrol : vscontrol;

    (* Collective Blade Pitch Controller *)
    pitch : pitch
}

let string_of_params params =
    "{\n" ^
    ("  rho: " ^ (to_string params.rho) ^ ";\n") ^
    ("  rotor: " ^ (to_string params.rotor) ^ ";\n") ^
    ("  lambda_opt: " ^ (to_string params.lambda_opt) ^ ";\n") ^
    ("  omega_rated: " ^ (to_string params.omega_rated) ^ ";\n") ^
    ("  wind_rated: " ^ (to_string params.wind_rated) ^ ";\n") ^
    ("  eta: " ^ (to_string params.eta) ^ ";\n") ^
    ("  h_H: " ^ (to_string params.h_H) ^ ";\n") ^
    ("  m_T: " ^ (to_string params.m_T) ^ ";\n") ^
    ("  m_N: " ^ (to_string params.m_N) ^ ";\n") ^
    ("  m_H: " ^ (to_string params.m_H) ^ ";\n") ^
    ("  m_B: " ^ (to_string params.m_B) ^ ";\n") ^
    ("  f_0: " ^ (to_string params.f_0) ^ ";\n") ^
    ("  d_s: " ^ (to_string params.d_s) ^ ";\n") ^
    ("  mTe: " ^ (to_string params.mTe) ^ ";\n") ^
    ("  cTe: " ^ (to_string params.cTe) ^ ";\n") ^
    ("  kTe: " ^ (to_string params.kTe) ^ ";\n") ^
    ("  j_H: " ^ (to_string params.j_H) ^ ";\n") ^
    ("  j_B: " ^ (to_string params.j_B) ^ ";\n") ^
    ("  j_G: " ^ (to_string params.j_G) ^ ";\n") ^
    ("  gBRatio: " ^ (to_string params.gBRatio) ^ ";\n") ^
    ("  inertia: " ^ (to_string params.inertia) ^ ";\n") ^
    ("  omega_g_rated: " ^ (to_string params.omega_g_rated) ^ ";\n") ^
    ("  xt_dot0: " ^ (to_string params.xt_dot0) ^ ";\n") ^
    ("  xT0: " ^ (to_string params.xT0) ^ ";\n") ^
    ("  omega0: " ^ (to_string params.omega0) ^ ";\n") ^
    ("  omega_g0: " ^ (to_string params.omega_g0) ^ ";\n") ^
    ("  genEff: " ^ (to_string params.genEff) ^ ";\n") ^
    ("  vscontrol: " ^ (string_of_vscontrol ("  ", params.vscontrol)) ^ ";\n") ^
    ("  pitch: " ^ (string_of_pitch ("  ", params.pitch)) ^ ";\n") ^
    "}"

let discrete get_default v0_0 =
    let init_omega = Array.map make (Array.of_list
        [0.;0.1267;0.2534;0.3801;0.5068;0.6336;0.7603;0.8870;1.0137;1.1404;
         1.2671;1.2671;1.2671;1.2671;1.2671;1.2671;1.2671;1.2671;1.2671;1.2671;
         1.2671;1.2671;1.2671;1.2671;1.2671;1.2671])
    in
    let init_v0 = Array.map make (Array.of_list
        [0.;1.;2.;3.;4.;5.;6.;7.;8.;9.;10.;11.4;12.;13.;14.;15.;16.;17.;18.;19.;
         20.;21.;22.;23.;24.;25.])
    in
    let init_pitch = Array.map make (Array.of_list
        [0.;0.;0.;0.;0.;0.;0.;0.;0.;0.;0.;0.;
         0.0529;0.1152;0.1518;0.1824;0.2105;0.2363;0.2604;0.2833;0.3049;0.3264;
         0.3480;0.3697;0.3901;0.4096])
    in

    (* params *)
    let tmax = make 630. in
    let rho          = make 1.225 in
    let rotor        = make (126./.2.) in
    let lambda_opt   = make 7.55 in
    let omega_rated  = rpm2radPs (make 12.1) in
    let wind_rated   = make 11.2 in
    let eta          = make 0.944 in
    let h_H = make 90. in
    let m_T = make 522617. in
    let m_N = make 240000. in
    let m_H = make 56780. in
    let m_B = make 17740. in
    let f_0 = make 0.31994 in
    let d_s = make 0.01 in
    let mTe = (scale m_T 0.25)+m_N+m_H+(scale m_B 3.) in
    let cTe = (scale pi_t 4.)*mTe*d_s*f_0 in
    let kTe = mTe*(pow (twopi_t*f_0) 2.) in

    let j_H     = make 115926. in
    let j_B     = make 11776047. in
    let j_G     = make 534.116 in
    let gBRatio = make (1./.97.) in
    let inertia = j_H+(scale j_B 3.)+j_G*(pow gBRatio 2.) in
    let omega_g_rated = omega_rated/gBRatio in

    let xt_dot0  = make 0. in
    let xT0      = ((pow v0_0 2.)*(scale rho 0.5)*pi_t*(pow rotor 2.))/kTe in
    let omega0   = interp1(init_v0,init_omega,v0_0) in
    let omega_g0 = omega0/gBRatio in

    (* vscontrol *)
    let genEff = make 0.944 in
    let vs_rtPwr      = make 5296610.0 in
    let vs_rgn3MP     = make       0.01745329 in
    let vs_ctInSp     = make      70.16224 in
    let vs_maxRat     = make   15000.0 in
    let vs_maxTq      = make   47402.91 in
    let vs_rgn2K      = make       2.332287 in
    let vs_rgn2Sp     = make      91.21091 in
    let vs_rtGnSp     = make     121.6805 in
    let vs_rtPwr      = make 5296610.0 in
    let vs_slPc       = make      10.0 in
    let vs_sySp       = vs_rtGnSp/(translate (scale vs_slPc 0.01) 1.0) in
    let vs_slope15    =
        (vs_rgn2K*vs_rgn2Sp*vs_rgn2Sp)/(vs_rgn2Sp-vs_ctInSp)
    in
    let vs_slope25    =
        (vs_rtPwr/vs_rtGnSp)/(vs_rtGnSp-vs_sySp)
    in
    let vs_trGnSp =
        if (vs_rgn2K = make 0.0) then vs_sySp
        else (vs_slope25-sqrt(vs_slope25*(vs_slope25-(scale vs_rgn2K 4.)*vs_sySp)))/(scale vs_rgn2K 2.)
    in
    let vs_filterConstant = inv (scale twopi_t 0.25) in

    (* pitch *)
    let pitch_omega     = twopi_t in
    let pitch_xi        = make 0.7 in
    let pitch_delay     = make 0.3545 in
    let pitch_rateLimit = deg2rad(make 8.) in
    let pitch_max       = deg2rad(make 90.) in
    let pitch_min       = make 0. in
    let pitch_theta0    = interp1(init_v0,init_pitch,v0_0) in
    let pitch_thetaDot0 = make 0. in
    let pitch_actuatorType = 1 in
    let pitch_filterConstant = inv (scale twopi_t 0.25) in

    let cpc_gS_factor  = make 0.1099965 in
    let cpc_kI         = make 0.008068634 in
    let cpc_kP         = make 0.01882681 in
    let cpc_tI         = cpc_kP/cpc_kI in
    let cpc_antiWindUp = make 1. in
{
    rho          = rho;
    rotor        = rotor;
    lambda_opt   = lambda_opt;
    omega_rated  = omega_rated;
    wind_rated   = wind_rated;
    eta          = eta;
    h_H = h_H;
    m_T = m_T;
    m_N = m_N;
    m_H = m_H;
    m_B = m_B;
    f_0 = f_0;
    d_s = d_s;
    mTe = mTe;
    cTe = cTe;
    kTe = kTe;
    j_H     = j_H;
    j_B     = j_B;
    j_G     = j_G;
    gBRatio = gBRatio;
    inertia = inertia;
    omega_g_rated = omega_g_rated;
    xt_dot0 = xt_dot0;
    xT0 = xT0;
    omega0 = omega0;
    omega_g0 = omega_g0;

    genEff = genEff;
    vscontrol = {
        rgn3MP  = vs_rgn3MP;
        ctInSp  = vs_ctInSp;
        maxRat  = vs_maxRat;
        maxTq   = vs_maxTq;
        rgn2K   = vs_rgn2K;
        rgn2Sp  = vs_rgn2Sp;
        rtGnSp  = vs_rtGnSp;
        rtPwr   = vs_rtPwr;
        slPc    = vs_slPc;
        sySp    = vs_sySp;
        slope15 = vs_slope15;
        slope25 = vs_slope25;
        trGnSp  = vs_trGnSp;
        vs_filterConstant = vs_filterConstant;
    };

    pitch = {
        omega     = pitch_omega;
        xi        = pitch_xi;
        delay     = pitch_delay;
        rateLimit = pitch_rateLimit;
        max       = pitch_max;
        min       = pitch_min;
        theta0    = pitch_theta0;
        thetaDot0 = pitch_thetaDot0;
        actuatorType = pitch_actuatorType;
        pitch_filterConstant = pitch_filterConstant;
        cpc = {
            gS_factor = cpc_gS_factor;
            kI = cpc_kI;
            kP = cpc_kP;
            tI = cpc_tI;
            antiWindUp = cpc_antiWindUp;
        }
    };
}
