open MyOp
open Sc_utils

let saturate (low, high, v) = min (max v low) high

node integrate_fwd (tstep, dy, y0) = y where
    rec y = y0 fby (y + tstep * dy)

node integrate_bwd (tstep, dy, y0) = y where
    rec y = y0 -> (pre y + tstep * dy)

node step (tstep, y0, t0, y1) =
    let t = integrate_bwd (tstep, make 1., make 0.) in
    if t < t0 then y0 else y1

node transfer_fn (tstep, x, denom1, denom2, y0) = y where
    rec y = integrate_fwd (tstep, (inv denom1) * (x - y * denom2), y0)

node sc_subsystem (tstep, fs, tcw, fcw) = temp, temp_c, fc, fcw_, q, p where
    rec p = transfer_fn (tstep, aux_p, make (actuator_time_constant /. 2.), make 1., make p_setpoint)
    and aux_p = integrate_fwd (tstep, daux_p, make p_setpoint)
    and daux_p = scale ((fs - fc) * temp_c) (0.461526 /. volume)
    and temp_c = lookup_p_t aux_p
    and fc = q / (lookup_lambda aux_p)
    and q = dTm / (translate (scale (inv (pow fcw_ 0.8)) 0.0872924756541668) 0.00073786772008033)
    and dTm = (temp - tcw) / log((temp_c - tcw) / (temp_c  - temp))
    and temp = integrate_fwd (tstep, dtemp, make temp_setpoint)
    and dtemp = scale ((scale q (1. /. 4.2)) + (tcw - temp) * fcw_) (1. /. cw_holdup)
    and fcw_ = transfer_fn (tstep, aux_fcw, make 1., make 1., make fcw_setpoint)
    and aux_fcw = saturate (make 0., make 200., translate fcw fcw_setpoint)

let process_input x = mapminmax (in_xmin, in_xmax, in_ymin, in_ymax, x)
let process_output y = mapminmax (out_ymin, out_ymax, out_xmin, out_xmax, y)
let tansig x = translate (scale (inv (translate (exp(scale x (-2.))) 1.)) 2.) (-1.)

node layer1 (tstep, i1) = (o1, o2, o3) where
    (* output o *)
    rec o1 = tansig (translate (iw1 + lw1) b1_1)
    and o2 = tansig (translate (iw2 + lw2) b1_2)
    and o3 = tansig (translate (iw3 + lw3) b1_3)

    (* iw{1,1} *)
    and iw1 = scale i1 iw1_1
    and iw2 = scale i1 iw1_2
    and iw3 = scale i1 iw1_3

    (* lw{1,1} *)
    and lw1 = (scale d1 lw1_1_1) + (scale d2 lw1_1_2) + (scale d3 lw1_1_3) + (scale d4 lw1_1_4) +
              (scale d5 lw1_1_5) + (scale d5 lw1_1_5) + (scale d6 lw1_1_6)
    and lw2 = (scale d1 lw1_2_1) + (scale d2 lw1_2_2) + (scale d3 lw1_2_3) + (scale d4 lw1_2_4) +
              (scale d5 lw1_2_5) + (scale d5 lw1_2_5) + (scale d6 lw1_2_6)
    and lw3 = (scale d1 lw1_3_1) + (scale d2 lw1_3_2) + (scale d3 lw1_3_3) + (scale d4 lw1_3_4) +
              (scale d5 lw1_3_5) + (scale d5 lw1_3_5) + (scale d6 lw1_3_6)

    (* delays 2 *)
    and d1 = transfer_fn (tstep, o1, make 1., make 10., make 0.)
    and d2 = transfer_fn (tstep, o2, make 1., make 10., make 0.)
    and d3 = transfer_fn (tstep, o3, make 1., make 10., make 0.)
    and d4 = transfer_fn (tstep, d1, make 1., make 10., make 0.)
    and d5 = transfer_fn (tstep, d2, make 1., make 10., make 0.)
    and d6 = transfer_fn (tstep, d3, make 1., make 10., make 0.)

node layer2 (tstep, (i1, i2, i3)) = o1 where
    rec o1 = translate lw b2_1
    and lw = (scale i1 lw2_1_1) + (scale i2 lw2_1_2) + (scale i3 lw2_1_3)

node nnet (tstep, inp) = outp where
    rec processed_inp = process_input inp
    and layer1_out = layer1 (tstep, processed_inp)
    and layer2_out = layer2 (tstep, layer1_out)
    and outp = process_output layer2_out

node sc (tstep, fs) = temp, fcw, q, p where
    rec init tcw = make 60.
    and temp, temp_c, fc, fcw, q, p = sc_subsystem (tstep, fs, tcw, nnet_output)
    and nnet_input = p - (step (tstep, make 90., make 2., make 87.))
    and nnet_output = nnet (tstep, nnet_input)

open Scope
let tstep = make 0.1
node main () =
    let rec t = integrate_bwd (tstep, make 1., make 0.) in

    let init fs = make 4. in

    let temp, fcw, q, p = sc (tstep, fs) in

    let s1 = scope (3.99, 4.01, ("Fs", linear, get fs)) in
    let s2 = scope (78.5, 80., ("T", linear, get temp)) in
    let s3 = scope (100., 140., ("Fcw", linear, get fcw)) in
    let s4 = scope (8000., 10000., ("Q", linear, get q)) in
    let s5 = scope (80., 90., ("P", linear, get p)) in
    window5("Steam condenser RNN", 40., get t, s1, s2, s3, s4, s5)
