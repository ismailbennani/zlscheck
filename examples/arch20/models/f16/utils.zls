open Constants
open Matrix

let saturate (x, low, high) = max (min x high) low
let discrete round f =
    let frac, i = modf f in if frac >= 0.5 then i +. 1. else i

let hybrid hybrid_round x = round_x where
    rec init ceil_x = ceil x
    and init floor_x = floor x
    and init round_x = round x
    and present up(x -. ceil_x) | up(floor_x -. x) -> do
        ceil_x = ceil x and floor_x = floor x and round_x = round x
    done

let hybrid pdot(p3, p1) =
    let t, p2 =
    (*
       TR = Top Right     p1 >= 50 & p3 >= 50
       TL = Top Left      p1 <  50 & p3 >= 50
       BR = Bottom Right  p1 >= 50 & p3 <  50
       BL = Bottom Left   p1 <  50 & p3 <  50
    *)
        automaton
        | I ->
            do
                let init res =
                    if p1 >= 50. then
                        if p3 >= 50. then
                            (5., p1)
                        else
                            (Mlutils.rtau(60. -. p3), 60.)
                    else
                        if p3 >= 50. then
                            (5., 40.)
                        else
                            (Mlutils.rtau(p1 -. p3), p1)
                in res
            until (init) on (p1 >= 50. && p3 >= 50.) then TR
            else (init) on (p1 <  50. && p3 >= 50.) then TL
            else (init) on (p1 >= 50. && p3 <  50.) then BR
            else (init) on (p1 <  50. && p3 <  50.) then BL

        | TL -> do (5., 40.)
                until up(p1 -. 50.) on (p3 < 50.)
                    | up(50. -. p3) on (p1 >= 50.) then BR
                else up(p1 -. 50.) on (p3 >= 50.) then TR
                else up(50. -. p3) on (p1 < 50.) then BL
                else (disc p1) on (p1 >= 50. && p3 >= 50.)
                   | (disc p3) on (p1 >= 50. && p3 >= 50.) then TR
                else (disc p1) on (p1 <  50. && p3 >= 50.)
                   | (disc p3) on (p1 <  50. && p3 >= 50.) then TL
                else (disc p1) on (p1 >= 50. && p3 <  50.)
                   | (disc p3) on (p1 >= 50. && p3 <  50.) then BR
                else (disc p1) on (p1 <  50. && p3 <  50.)
                   | (disc p3) on (p1 <  50. && p3 <  50.) then BL
        | TR -> do (5., p1)
                until up(50. -. p1) on (p3 < 50.)
                    | up(50. -. p3) on (p1 < 50.)  then BL
                else up(50. -. p1) on (p3 >= 50.) then TL
                else up(50. -. p3) on (p1 >= 50.) then BR
                else (disc p1) on (p1 >= 50. && p3 >= 50.)
                   | (disc p3) on (p1 >= 50. && p3 >= 50.) then TR
                else (disc p1) on (p1 <  50. && p3 >= 50.)
                   | (disc p3) on (p1 <  50. && p3 >= 50.) then TL
                else (disc p1) on (p1 >= 50. && p3 <  50.)
                   | (disc p3) on (p1 >= 50. && p3 <  50.) then BR
                else (disc p1) on (p1 <  50. && p3 <  50.)
                   | (disc p3) on (p1 <  50. && p3 <  50.) then BL
        | BL -> do (Mlutils.rtau(p1 -. p3), p1)
                until up(p1 -. 50.) on (p3 < 50.) then BR
                else up(p1 -. 50.) on (p3 >= 50.)
                   | up(p3 -. 50.) on (p1 >= 50.) then TR
                else up(p3 -. 50.) on (p1 < 50.) then TL
                else (disc p1) on (p1 >= 50. && p3 >= 50.)
                   | (disc p3) on (p1 >= 50. && p3 >= 50.) then TR
                else (disc p1) on (p1 <  50. && p3 >= 50.)
                   | (disc p3) on (p1 <  50. && p3 >= 50.) then TL
                else (disc p1) on (p1 >= 50. && p3 <  50.)
                   | (disc p3) on (p1 >= 50. && p3 <  50.) then BR
                else (disc p1) on (p1 <  50. && p3 <  50.)
                   | (disc p3) on (p1 <  50. && p3 <  50.) then BL
        | BR -> do (Mlutils.rtau(60. -. p3), 60.)
                until up(50. -. p1) on (p3 < 50.) then BL
                else up(50. -. p1) on (p3 >= 50.)
                   | up(p3 -. 50.) on (p1 < 50.) then TL
                else up(p3 -. 50.) on (p1 >= 50.) then TR
                else (disc p1) on (p1 >= 50. && p3 >= 50.)
                   | (disc p3) on (p1 >= 50. && p3 >= 50.) then TR
                else (disc p1) on (p1 <  50. && p3 >= 50.)
                   | (disc p3) on (p1 <  50. && p3 >= 50.) then TL
                else (disc p1) on (p1 >= 50. && p3 <  50.)
                   | (disc p3) on (p1 >= 50. && p3 <  50.) then BR
                else (disc p1) on (p1 <  50. && p3 <  50.)
                   | (disc p3) on (p1 <  50. && p3 <  50.) then BL
        in t *. (p2 -. p3)

let morellif16(alpha, beta, de, da, dr, p, q, r, cbar, b, v, xcg, xcgref) =
    cx, cy, cz, cl, cm, cn where rec

    (* bounds alpha between -10 deg and 45 deg *)
    (* let alpha=max (-10. *. pi /. 180.) (min (45. *. pi /. 180.) alpha) in *)
    (* bounds beta between -30 deg and 30 deg *)
    (* let beta = max (-30. *. pi /. 180.) (min (30. *. pi /. 180.) beta) in *)
    (* bounds elevator deflection between -25 deg and 25 deg *)
    (* let de = max (-25. *. pi /. 180.) (min(25. *. pi /. 180.) de) in *)
    (* bounds aileron deflection between -21.5 deg and 21.5 deg *)
    (* let da = max (-21.5 *. pi /. 180.) (min (21.5 *. pi /. 180.) da) in *)
    (* bounds rudder deflection between -30 deg and 30 deg *)
    (* let dr = max (-30. *. pi /. 180.) (min (30. *. pi /. 180.) dr) in *)

    (* reference longitudinal cg position in Morelli f16 model *)
    (* let xcgref = 0.35 in *)

    let phat = p *. b /. (2. *. v)
    and qhat = q *. cbar /. (2. *. v)
    and rhat = r *. b /. (2. *. v)

    and a0 = -1.943367e-2 and a1 = 2.136104e-1 and a2 = -2.903457e-1
    and a3 = -3.348641e-3 and a4 = -2.060504e-1 and a5 = 6.988016e-1
    and a6 = -9.035381e-1

    and b0 = 4.833383e-1 and b1 = 8.644627 and b2 = 1.131098e1
    and b3 = -7.422961e1 and b4 = 6.075776e1

    and c0 = -1.145916 and c1 = 6.016057e-2 and c2 = 1.642479e-1

    and d0 = -1.006733e-1 and d1 = 8.679799e-1
    and d2 = 4.260586 and d3 = -6.923267

    and e0 = 8.071648e-1 and e1 = 1.189633e-1
    and e2 = 4.177702 and e3 = -9.162236

    and f0 = -1.378278e-1 and f1 = -4.211369 and f2 = 4.775187
    and f3 = -1.026225e1 and f4 = 8.399763 and f5 = -4.354000e-1

    and g0 = -3.054956e1 and g1 = -4.132305e1 and g2 = 3.292788e2
    and g3 = -6.848038e2 and g4 = 4.080244e2

    and h0 = -1.05853e-1 and h1 = -5.776677e-1 and h2 = -1.672435e-2
    and h3 = 1.357256e-1 and h4 = 2.172952e-1 and h5 = 3.464156
    and h6 = -2.835451 and h7 = -1.098104

    and i0 = -4.126806e-1 and i1 = -1.189974e-1
    and i2 = 1.247721 and i3 = -7.391132e-1

    and j0 = 6.250437e-2 and j1 = 6.067723e-1 and j2 = -1.101964
    and j3 = 9.100087 and j4 = -1.192672e1

    and k0 = -1.463144e-1 and k1 = -4.07391e-2 and k2 = 3.253159e-2
    and k3 = 4.851209e-1 and k4 = 2.978850e-1 and k5 = -3.746393e-1
    and k6 = -3.213068e-1

    and l0 = 2.635729e-2 and l1 = -2.192910e-2 and l2 = -3.152901e-3
    and l3 = -5.817803e-2 and l4 = 4.516159e-1 and l5 = -4.928702e-1
    and l6 = -1.579864e-2

    and m0 = -2.029370e-2 and m1 = 4.660702e-2 and m2 = -6.012308e-1
    and m3 = -8.062977e-2 and m4 = 8.320429e-2 and m5 = 5.018538e-1
    and m6 = 6.378864e-1 and m7 = 4.226356e-1

    and n0 = -5.19153 and n1 = -3.554716 and n2 = -3.598636e1
    and n3 = 2.247355e2 and n4 = -4.120991e2 and n5 = 2.411750e2

    and o0 = 2.993363e-1 and o1 = 6.594004e-2 and o2 = -2.003125e-1
    and o3 = -6.233977e-2 and o4 = -2.107885 and o5 = 2.141420
    and o6 = 8.476901e-1

    and p0 = 2.677652e-2 and p1 = -3.298246e-1 and p2 = 1.926178e-1
    and p3 = 4.013325 and p4 = -4.404302

    and q0 = -3.698756e-1 and q1 = -1.167551e-1 and q2 = -7.641297e-1

    and r0 = -3.348717e-2 and r1 = 4.276655e-2 and r2 = 6.573646e-3
    and r3 = 3.535831e-1 and r4 = -1.373308 and r5 = 1.237582
    and r6 = 2.302543e-1 and r7 = -2.512876e-1 and r8 = 1.588105e-1
    and r9 = -5.199526e-1

    and s0 = -8.115894e-2 and s1 = -1.156580e-2 and s2 = 2.514167e-2
    and s3 = 2.038748e-1 and s4 = -3.337476e-1 and s5 = 1.004297e-1
    in

    let cx0 = a0 +. a1 *. alpha +. a2 *. de**2. +. a3 *. de +.
              a4 *. alpha *. de +. a5 *. alpha**2. +. a6 *. alpha**3.
    and cxq = b0 +. b1 *. alpha +. b2 *. alpha**2. +. b3 *. alpha**3. +.
              b4 *. alpha**4.
    and cy0 = c0 *. beta +. c1 *. da +. c2 *. dr
    and cyp = d0 +. d1 *. alpha +. d2 *. alpha**2. +. d3 *. alpha**3.
    and cyr = e0 +. e1 *. alpha +. e2 *. alpha**2. +. e3 *. alpha**3.
    and cz0 = (f0 +. f1 *. alpha +. f2 *. alpha**2. +. f3 *. alpha**3. +.
              f4 *. alpha**4.) *. (1. -. beta**2.) +. f5 *. de
    and czq = g0 +. g1 *. alpha +. g2 *. alpha**2. +. g3 *. alpha**3. +.
              g4 *. alpha**4.
    and cl0 = h0 *. beta +. h1 *. alpha *. beta +. h2 *. alpha**2. *. beta +.
              h3 *. beta**2. +. h4 *. alpha *. beta**2. +.
              h5 *. alpha**3. *. beta +.
              h6 *. alpha**4. *. beta +. h7 *. alpha**2. *. beta**2.
    and clp = i0 +. i1 *. alpha +. i2 *. alpha**2. +. i3 *. alpha**3.
    and clr = j0 +. j1 *. alpha +. j2 *. alpha**2. +. j3 *. alpha**3. +.
              j4 *. alpha**4.
    and clda = k0 +. k1 *. alpha +. k2 *. beta +. k3 *. alpha**2. +.
               k4 *. alpha *. beta +. k5 *. alpha**2. *. beta +. k6 *. alpha**3.
    and cldr = l0 +. l1 *. alpha +. l2 *. beta +. l3 *. alpha *. beta +.
               l4 *. alpha**2. *. beta +. l5 *. alpha**3. *. beta +.
               l6 *. beta**2.
    and cm0 = m0 +. m1 *. alpha +. m2 *. de +. m3 *. alpha *. de +.
              m4 *. de**2. +. m5 *. alpha**2. *. de +. m6 *. de**3. +.
              m7 *. alpha *. de**2.
    in

    let cmq = n0 +. n1 *. alpha +. n2 *. alpha**2. +. n3 *. alpha**3. +.
              n4 *. alpha**4. +. n5 *. alpha**5.
    and cn0 = o0 *. beta +. o1 *. alpha *. beta +. o2 *. beta**2. +.
              o3 *. alpha *. beta**2. +. o4 *. alpha**2. *. beta +.
              o5 *. alpha**2. *. beta**2. +. o6 *. alpha**3. *. beta
    and cnp = p0 +. p1 *. alpha +. p2 *. alpha**2. +. p3 *. alpha**3. +.
              p4 *. alpha**4.
    and cnr = q0 +. q1 *. alpha +. q2 *. alpha**2.
    and cnda = r0 +. r1 *. alpha +. r2 *. beta +. r3 *. alpha *. beta +.
               r4 *. alpha**2. *. beta +. r5 *. alpha**3. *. beta +.
               r6 *. alpha**2. +. r7 *. alpha**3. +. r8 *. beta**3. +.
               r9 *. alpha *. beta**3.
    and cndr = s0 +. s1 *. alpha +. s2 *. beta +. s3 *. alpha *. beta +.
               s4 *. alpha**2. *. beta +. s5 *. alpha**2.
    in do

        cx = cx0 +. cxq *. qhat
    and cy = cy0 +. cyp *. phat +. cyr *. rhat
    and cz = cz0 +. czq *. qhat
    and cl = cl0 +. clp *. phat +. clr *. rhat +. clda *. da +. cldr *. dr
    and cm = cm0 +. cmq *. qhat +. cz *. (xcgref -. xcg)
    and cn = cn0 +. cnp *. phat +. cnr *. rhat +. cnda *. da +. cndr *. dr -.
             cy *. (xcgref -. xcg) *. (cbar /. b)
    done
