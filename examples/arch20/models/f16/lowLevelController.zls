open F16_types
open MyOp
open Matrix

let k_lqr_long =
    let mat = create 1 3 (MyOp.create ()) in
    set_row_from_list mat 0 (List.map make [ -156.8801506723475; -31.037008068526642; -38.72983346216317 ]);
    mat

(* let k_lqr_lat =
    let mat = create 2 5 (MyOp.create ()) in
    set_row_from_list mat 0 (List.map make [ 30.511411060051355; -5.705403676148551; -9.310178739319714; -33.97951344944365; -10.652777306717681 ]);
    set_row_from_list mat 1 (List.map make [ -22.65901530645282; 1.3193739204719577;  -14.2051751789712; 6.7374079391328845; -53.726328142239225 ]);
    mat *)
let k_lqr_lat =
    let mat = create 2 5 (MyOp.create ()) in
    set_row_from_list mat 0 (List.map make [ 37.84483; -25.40956; -6.82876; -332.88343; -17.15997 ]);
    set_row_from_list mat 1 (List.map make [ -23.91233; 5.69968; -21.63431; 64.49490; -88.36203 ]);
    mat

let x_equil = {
    vt = make 502.0;
    alpha = make 0.03887505597600522;
    beta = make 0.0;
    phi = make 0.0;
    theta = make 0.03887505597600522;
    psi = make 0.0;
    p = make 0.0;
    q = make 0.0;
    r = make 0.0;
    x9 = make 0.0;
    x10 = make 0.0;
    alt = make 1000.0;
    power = make 9.05666543872074;
}

let u_equil = {
    thtlc = make 0.13946204864060271;
    el = make (-0.7495784725828754);
    ail = make 0.0;
    rdr = make 0.0;
}

let get_num_integrators = 3

let get_u_deg (ctrlLimits, throttle_ref, state) =
    let x_delta = {
        vt = state.f16.vt - x_equil.vt;
        alpha = state.f16.alpha - x_equil.alpha;
        beta = state.f16.beta - x_equil.beta;
        phi = state.f16.phi - x_equil.phi;
        theta = state.f16.theta - x_equil.theta;
        psi = state.f16.psi - x_equil.psi;
        p = state.f16.p - x_equil.p;
        q = state.f16.q - x_equil.q;
        r = state.f16.r - x_equil.r;
        x9 = state.f16.x9 - x_equil.x9;
        x10 = state.f16.x10 - x_equil.x10;
        alt = state.f16.alt - x_equil.alt;
        power = state.f16.power - x_equil.power;
    } in

    (*
        u_deg[1:4] = np.dot(-self.K_lqr, x_ctrl) # Full Control
        u_deg[0] = u_ref[3]
        u_deg[0:4] += self.u_equil
    *)
    let thtlc = throttle_ref + u_equil.thtlc
    and el =
            - (get k_lqr_long 0 0) * x_delta.alpha
            - (get k_lqr_long 0 1) * x_delta.q
            - (get k_lqr_long 0 2) * state.nz
            + u_equil.el
    and ail =
            - (get k_lqr_lat 0 0) * x_delta.beta
            - (get k_lqr_lat 0 1) * x_delta.p
            - (get k_lqr_lat 0 2) * x_delta.r
            - (get k_lqr_lat 0 3) * state.ps
            - (get k_lqr_lat 0 4) * state.ny_r
            + u_equil.ail
    and rdr =
            - (get k_lqr_lat 1 0) * x_delta.beta
            - (get k_lqr_lat 1 1) * x_delta.p
            - (get k_lqr_lat 1 2) * x_delta.r
            - (get k_lqr_lat 1 3) * state.ps
            - (get k_lqr_lat 1 4) * state.ny_r
            + u_equil.rdr
    in

    { f16 = x_delta; nz = state.nz; ps = state.ps; ny_r = state.ny_r },
    {
        thtlc = Utils.saturate (thtlc, ctrlLimits.throttleMin, ctrlLimits.throttleMax);
        el = Utils.saturate (el, ctrlLimits.elevatorMinDeg, ctrlLimits.elevatorMaxDeg);
        ail = Utils.saturate (ail, ctrlLimits.aileronMinDeg, ctrlLimits.aileronMaxDeg);
        rdr = Utils.saturate (rdr, ctrlLimits.rudderMinDeg, ctrlLimits.rudderMaxDeg);
    }

let get_integrator_derivatives (u_ref, nz, ps, ny_r) =
    (nz - u_ref.nz_ref,
     ps - u_ref.ps_ref,
     ny_r - u_ref.ny_r_ref)
