(*
  This example is adapted from a Simulink model:
  https://fr.mathworks.com/help/simulink/examples/modeling-an-automatic-transmission-controller.html

  This is a continuous implementation of the automatic transmission controller.

  Refer to the diff_plots folder to see comparisons between the continuous
  and the discrete versions of this model.
*)

(** utils **)

hybrid xup e =
    present (up e) | (disc e) on (e >= 0.) -> ()

(* assumption: x0 in ]xmin,xmax[ *)
let hybrid integrate_and_saturate(dx, x0, xmin, xmax) = x where
  rec der x = dx' init x0
  and automaton
  | Integrate(init_x) ->
    do
        dx' = dx
    until (xup(x -. xmax))() then High
    else (xup(xmin -. x))() then Low
  | Low ->
    do
        dx' = 0.
    until (xup(dx))() then Integrate(xmin)
  | High ->
    do
        dx' = 0.
    until (xup(-.dx))() then Integrate(xmax)
  init Integrate(x0)

(** algorithm **)

let hybrid engine(ti, throttle) = rpm where
  rec te = Common.lookup_engine(throttle, rpm)
  and drpm = te -. ti
  and rpm = integrate_and_saturate (Common.engine_feedback_gain *. drpm, 1000., 600., 6000.)

let hybrid gearlogic(shift) = gear where
  rec init gear = 1.
  and automaton
      | First  ->
          do
          until shift(Common.UP)
            then do next gear = 2. in Second
      | Second ->
          do
          until shift(Common.DOWN)
            then do next gear = 1. in First
          else  shift(Common.UP)
            then do next gear = 3. in Third
      | Third  ->
          do
          until shift(Common.DOWN)
            then do next gear = 2. in Second
          else  shift(Common.UP)
            then do next gear = 4. in Fourth
      | Fourth ->
          do
          until shift(Common.DOWN)
            then do next gear = 3. in Third

let hybrid shiftlogic(speed, throttle) = gear where
  rec up_th = Common.lookup_interpup(throttle, gear)
  and dn_th = Common.lookup_interpdn(throttle, gear)

  and gear = gearlogic(shift)

  and automaton
      | SteadyState  ->
          do
          until (xup(dn_th -. speed))() | (init) on (speed < dn_th)
            then DownShifting
          else (xup(speed -. up_th))() | (init) on (speed > up_th)
            then UpShifting
      | DownShifting ->
          local t in
          do
            der t = 1. init 0.
          until (xup(speed -. dn_th))()
            then SteadyState
          else (xup(t -. Common.twait))()
            then do emit shift = Common.DOWN in SteadyState
      | UpShifting   ->
          local t in
          do
            der t = 1. init 0.
          until (xup(up_th -. speed))()
            then SteadyState
          else (xup(t -. Common.twait))()
            then do emit shift = Common.UP in SteadyState

let hybrid vehicle(out_torque, brake_torque) = (speed, trans_rpm) where
  rec final_drive_ratio = Common.p_final_drive_ratio *. out_torque
  and aux1 = final_drive_ratio -. signed_load
  and vehicle_inertia = Common.iv_inv *. aux1
  and der wheel_speed = vehicle_inertia
      init Common.p_initial_wheel_speed
  and linear_speed = Common.l_speed_coef *. wheel_speed
  and mph = Common.p_mph *. linear_speed
  and road_load = Common.p_drag_friction +. Common.p_aerodynamic_drag *. mph *. mph
  and sgn = Basics.bad_sgn mph
  and brake = brake_torque +. road_load
  and signed_load = sgn *. brake

  and trans_rpm = Common.p_final_drive_ratio *. wheel_speed
  and speed = mph

let hybrid autotrans(throttle, brake_torque) = (rpm, gear, speed) where
  rec rpm = engine(ti, throttle)
  and gear = shiftlogic(speed, throttle)
  and ti, out_torque = Common.transmission(rpm, gear, trans_rpm)
  and speed, trans_rpm = vehicle(out_torque, brake_torque)

open Scope

let hybrid main() =
  let rec der t = 1. init 0.

  and throttle, brake_torque = 100., 0.
  and rpm, gear, speed = autotrans(throttle, brake_torque) in

  present (period(0.1)) ->
    let s1 = scope2(0.  , 325. , ("throttle", linear, throttle),
                                 ("brake torque", linear, brake_torque))
    and s2 = scope (0.  , 4.   , ("gear", linear, gear))
    and s3 = scope2(0.  , 200. , ("speed", linear, speed), ("", linear, 120.))
    and s4 = scope2(600., 6000., ("rpm", linear, rpm), ("", linear, 4750.)) in

    window4("Autotrans (continuous)", 50., t, s1, s2, s3, s4)
  else ()
