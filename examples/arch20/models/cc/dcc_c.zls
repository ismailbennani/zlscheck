let d0 = 20.
let d1 = 15.
let d2 = 10.
let d3 = 5.

hybrid integrate (x, y0) = y where
    rec der y = x init y0

hybrid xup(e) =
    present (init) on (e >= 0.) | up(e) | (disc e) on (e >= 0.) -> ()

hybrid leader_car (y0, dy0, v0, dv0) (throttle, dthrottle, brake, dbrake) = y, dy where
    rec y = integrate (v, y0)
    and dy = integrate (dv, dy0)
    and v = integrate (-. throttle -. brake *. v, v0)
    and dv = integrate (-. dthrottle -. dbrake *. v -. brake *. dv, dv0)

hybrid follower_car (y0, dy0, v0, dv0) (leader_y, dleader_y) = y, dy where
    rec v = integrate (der_v, v0)
    and dv = integrate (dder_v, dv0)
    and y = integrate (der_y, y0)
    and dy = integrate (dder_y, dy0)
    and automaton
    | Chasing ->
        do
                der_v = 1.
            and dder_v = 0.
            and der_y = -. v
            and dder_y = -. dv
        until (xup(d2 -. (y -. leader_y)))() then Keeping
    | Keeping ->
        do
                der_v = 0.
            and dder_v = 0.
            and der_y = v
            and dder_y = dv
        until (xup(y -. leader_y -. d1))() then Chasing
        else (xup(d3 -. (y -. leader_y)))() then Braking
    | Braking ->
        do
                der_v = -. v
            and dder_v = -. dv
            and der_y = -. v
            and dder_y = -. dv
        until (xup(y -. leader_y -. d0))() then Chasing

hybrid chasing_cars (throttle, dthrottle, brake, dbrake) =
        c1, dc1, c2, dc2, c3, dc3, c4, dc4, c5, dc5 where
    rec c1, dc1 = leader_car (0., 0., 0., 0.) (throttle, dthrottle, brake, dbrake)
    and c2, dc2 = follower_car (10., 0., 0., 0.) (c1, dc1)
    and c3, dc3 = follower_car (20., 0., 0., 0.) (c2, dc2)
    and c4, dc4 = follower_car (30., 0., 0., 0.) (c3, dc3)
    and c5, dc5 = follower_car (40., 0., 0., 0.) (c4, dc4)

open Scope
let static tstep = 0.1
let tmax = 100.
hybrid main () =
    let t = integrate (1., 0.) in

    let throttle = 1. in
    let dthrottle = 1. in
    let brake = 0. in
    let dbrake = 0. in

    let c1,dc1,c2,dc2,c3,dc3,c4,dc4,c5,dc5 =
        chasing_cars (throttle, dthrottle, brake, dbrake) in

    present (period(tstep)) ->
        let s1 = scope2(0., 1., ("throttle", linear, throttle),
                                ("brake", linear, brake)) in
        let s2 = scopen(-5000., 50., [("c1", linear, c1); ("c2", linear, c2);
                                      ("c3", linear, c3); ("c4", linear, c4);
                                      ("c5", linear, c5)]) in
        let s3 = scopen(-50., 50., [("dc1", linear, dc1); ("dc2", linear, dc2);
                                    ("dc3", linear, dc3); ("dc4", linear, dc4);
                                    ("dc5", linear, dc5)]) in
        window3 ("Chasing cars", tmax, t, s1, s2, s3)
    else ()
