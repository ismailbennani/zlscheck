open MyOp

let d0 = make 20.
let d1 = make 15.
let d2 = make 10.
let d3 = make 5.

node integrate (tstep, x, y0) = y where
    rec y = y0 fby (y + tstep * x)

node leader_car (y0, v0, t, throttle, brake) = y where
    rec tstep = t -> (t - pre t)
    and y = integrate (tstep, v, y0)
    and v = integrate (tstep, - throttle - brake * v, v0)

node follower_car (y0, v0, t, leader_y) = y, rob, switch where
    rec tstep = t -> (t - pre t)
    and v = integrate (tstep, dv, v0)
    and y = integrate (tstep, dy, y0)
    and automaton
    | Chasing ->
        do
                dv = make 1.
            and dy = - v
            and rob = y - leader_y - d2
        until (y - leader_y <= d2) then do emit switch in Keeping
    | Keeping ->
        let chase = make (Random.float 1.) > make 0.5 in
        do
                dv = make 0.
            and dy = v
            and rob = if chase then d1 - (y - leader_y) else y - leader_y - d3
        until (y - leader_y >= d1) then do emit switch in Chasing
        else (y - leader_y <= d3) then do emit switch in Braking
    | Braking ->
        do
                dv = - v
            and dy = - v
            and rob = d0 - (y - leader_y)
        until (y - leader_y >= d0) then do emit switch in Chasing

node chasing_cars (t, throttle, brake) = (c1, c2, c3, c4, c5), rob_trans where
    rec c1 = leader_car (make 0., make 0., t, throttle, brake)
    and c2, rob2, switch2 = follower_car (make 10., make 0., t, c1)
    and c3, rob3, switch3 = follower_car (make 20., make 0., t, c2)
    and c4, rob4, switch4 = follower_car (make 30., make 0., t, c3)
    and c5, rob5, switch5 = follower_car (make 40., make 0., t, c4)

    and rob_trans, switch_trans =
        if integer rob_i = integer 2 then (rob2, switch2)
        else if integer rob_i = integer 3 then (rob3, switch3)
        else if integer rob_i = integer 4 then (rob4, switch4)
        else (rob5, switch5)

    (* choose a transition to enable *)
    and rob_i = Stdlib.( + ) (Random.int 4) 2 fby
        present (switch_trans)() -> Stdlib.( + ) (Random.int 4) 2
        init rob_i
open Scope
let tstep = make 0.1
let tmax = make 100.
node main () =
    let t = integrate (tstep, make 1., make 0.) in

    let throttle = make 1. in
    let brake = make 0. in

    let (c1,c2,c3,c4,c5), _ = chasing_cars (t, throttle, brake) in

    let s1 = scope2(0., 1., ("throttle", linear, get throttle),
                            ("brake", linear, get brake)) in
    let s2 = scopen(-5000., 50., [("c1", linear, get c1); ("c2", linear, get c2);
                                  ("c3", linear, get c3); ("c4", linear, get c4);
                                  ("c5", linear, get c5)]) in
    window2 ("Chasing cars", get tmax, get t, s1, s2)
