(*
  This example is adapted from a Simulink model:
  https://fr.mathworks.com/help/simulink/examples/modeling-an-automatic-transmission-controller.html

  This is a continuous implementation of the automatic transmission controller.

  Refer to the diff_plots folder to see comparisons between the continuous
  and the discrete versions of this model.
*)

open FadFloat

(** utils **)

let hybrid integrate_and_saturate(dx, x0, xmin, xmax) = x where
  rec der aux_ = get dx init get x0
  and aux = make aux_
  and x = max xmin (min xmax aux)

let hybrid fup x = up (get x)

(** algorithm **)

let hybrid engine(ti, throttle) = rpm where
  rec te = At_common.lookup_engine(throttle, rpm)
  and drpm = te - ti
  and rpm = integrate_and_saturate (scale drpm At_common.engine_feedback_gain, At_common.init_rpm, At_common.min_rpm, At_common.max_rpm)

let hybrid gearlogic(shift) = gear where
  rec init gear = At_common.gear1
  and automaton
      | First  ->
          do
          until shift(At_common.UP)
            then do next gear = At_common.gear2 in Second
      | Second ->
          do
          until shift(At_common.DOWN)
            then do next gear = At_common.gear1 in First
          else  shift(At_common.UP)
            then do next gear = At_common.gear3 in Third
      | Third  ->
          do
          until shift(At_common.DOWN)
            then do next gear = At_common.gear2 in Second
          else  shift(At_common.UP)
            then do next gear = At_common.gear4 in Fourth
      | Fourth ->
          do
          until shift(At_common.DOWN)
            then do next gear = At_common.gear3 in Third

let hybrid shiftlogic(speed, throttle) = gear, rob where
  rec up_th = At_common.lookup_interpup(throttle, gear)
  and dn_th = At_common.lookup_interpdn(throttle, gear)

  and gear = gearlogic(shift)

  and automaton
      | SteadyState  ->
          let init go_up = if translate gear (-1.5) < zero () then true 
                           else if translate gear (-3.5) > zero () then false 
                           else make (Random.float 1.) > make 0.5 in
          (* let init tmp = print_endline (if go_up then "Aiming up!" else "Aiming down!") in *)
          do rob = if go_up then up_th - speed else speed - dn_th
          until (fup(dn_th - speed)) | (init) on (speed < dn_th)
            then DownShifting
          else (fup(speed - up_th)) | (init) on (speed > up_th)
            then UpShifting
      | DownShifting ->
          local t, t_ in
          do rob = zero ()
            and der t_ = get (integer 1) init get (integer 0)
            and t = make t_
          until (fup(speed - dn_th))
            then SteadyState
          else (fup(translate t (-. At_common.twait)))
            then do emit shift = At_common.DOWN in SteadyState
      | UpShifting   ->
          local t, t_ in
          do rob = zero ()
            and der t_ = get (integer 1) init get (integer 0)
            and t = make t_
          until (fup(up_th - speed))
            then SteadyState
          else (fup(translate t (-. At_common.twait)))
            then do emit shift = At_common.UP in SteadyState

let hybrid vehicle(out_torque, brake_torque) = (speed, trans_rpm) where
  rec final_drive_ratio = scale out_torque At_common.p_final_drive_ratio
  and aux1 = final_drive_ratio - signed_load
  and vehicle_inertia = scale aux1 At_common.iv_inv
  and der wheel_speed_ = get vehicle_inertia
      init get (At_common.p_initial_wheel_speed)
  and wheel_speed = make wheel_speed_
  and linear_speed = scale wheel_speed At_common.l_speed_coef
  and mph = scale linear_speed At_common.p_mph
  and road_load = translate (scale (mph * mph) At_common.p_aerodynamic_drag) At_common.p_drag_friction
  and sgn = present | (fup(mph)) -> integer 1
                    | (fup(-mph)) -> integer (-1)
            init if mph >= zero () then integer 1 else integer (-1)
  and brake = brake_torque + road_load
  and signed_load = sgn * brake

  and trans_rpm = scale wheel_speed At_common.p_final_drive_ratio
  and speed = mph

let hybrid autotrans (u) = Array.of_list [rpm; gear; speed; up_th; dn_th; rob] where
  rec throttle = Array.get u 0
  and brake_torque = Array.get u 1
  and up_th = At_common.lookup_interpup(throttle, gear)
  and dn_th = At_common.lookup_interpdn(throttle, gear)
  and rpm = engine(ti, throttle)
  and gear, rob = shiftlogic(speed, throttle)
  and ti, out_torque = At_common.transmission(rpm, gear, trans_rpm)
  and speed, trans_rpm = vehicle(out_torque, brake_torque)

open Nodes_fad

let node autotransd max_t h (throttle, brake) = (t, rpm, gear, speed, up_th, dn_th), translate rob 0.5 where
  rec { time = t; status = status; result = result } =
      solve autotrans max_t (next_horizon, Array.of_list [ throttle; brake ])
  and next_horizon =
      h fby (if t >= next_horizon then next_horizon +. h else next_horizon)
  and rpm = Array.get result 0
  and gear = Array.get result 1
  and speed = Array.get result 2
  and up_th = Array.get result 3
  and dn_th = Array.get result 4
  and rob = Array.get result 5

(* open Scope

let hybrid main() =
  let rec der t = get (integer 1) init get (zero ())

  and throttle, brake_torque = zero (), zero ()
  and rpm, gear, speed = autotrans(throttle, brake_torque) in

  present (period(0.1)) ->
    let s1 = scope2(0.  , 325. , ("throttle", linear, get throttle),
                                 ("brake torque", linear, get brake_torque))
    and s2 = scope (0.  , 4.   , ("gear", linear, get gear))
    and s3 = scope (0.  , 200. , ("speed", linear, get speed))
    and s4 = scope (600., 6000., ("rpm", linear, get rpm)) in

    window4("Autotrans (continuous)", 50., t, s1, s2, s3, s4)
  else () *)
