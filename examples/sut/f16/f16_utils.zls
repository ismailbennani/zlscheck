open Constants
open Matrix
open F16_mlutils
open FadFloat

let node integrate (x0, dx, h) = y where
    rec y = x0 fby (y + h * dx)

let saturate (x, low, high) = max (min x high) low
let discrete round f =
    let frac, i = modf f in
    if make frac >= make 0.5 then make (i +. 1.)
    else make i

let node pdot(p3, p1) =
    let t, p2 =
        if p1 >= make 50. then
            if p3 >= make 50. then
                (make 5., p1)
            else
                (rtau((make 60.) - p3), make 60.)
        else
            if p3 >= make 50. then
                (make 5., make 40.)
            else
                (rtau(p1 - p3), p1)
    in t * (p2 - p3)

(* warning, morellif16 is NOT subf16_morelli.m but Morellif16.m
   subf16_morelli.m is implemented in subf16_model.zls in node derivatives *)
let morellif16(alpha, beta, de, da, dr, p, q, r, cbar, b, v, xcg, xcgref) =
    cx, cy, cz, cl, cm, cn where rec

    (* bounds alpha between -10 deg and 45 deg *)
    (* let alpha=max (-10. * pi / 180.) (min (45. * pi / 180.) alpha) in *)
    (* bounds beta between -30 deg and 30 deg *)
    (* let beta = max (-30. * pi / 180.) (min (30. * pi / 180.) beta) in *)
    (* bounds elevator deflection between -25 deg and 25 deg *)
    (* let de = max (-25. * pi / 180.) (min(25. * pi / 180.) de) in *)
    (* bounds aileron deflection between -21.5 deg and 21.5 deg *)
    (* let da = max (-21.5 * pi / 180.) (min (21.5 * pi / 180.) da) in *)
    (* bounds rudder deflection between -30 deg and 30 deg *)
    (* let dr = max (-30. * pi / 180.) (min (30. * pi / 180.) dr) in *)

    (* reference longitudinal cg position in Morelli f16 model *)
    (* let xcgref = 0.35 in *)

    let phat = p * b / (scale v 2.)
    and qhat = q * cbar / (scale v 2.)
    and rhat = r * b / (scale v 2.)

    and a0 = make (-1.943367e-2) and a1 = make (2.136104e-1) and a2 = make (-2.903457e-1)
    and a3 = make (-3.348641e-3) and a4 = make (-2.060504e-1) and a5 = make (6.988016e-1)
    and a6 = make (-9.035381e-1)

    and b0 = make (4.833383e-1) and b1 = make (8.644627) and b2 = make (1.131098e1)
    and b3 = make (-7.422961e1) and b4 = make (6.075776e1)

    and c0 = make (-1.145916) and c1 = make (6.016057e-2) and c2 = make (1.642479e-1)

    and d0 = make (-1.006733e-1) and d1 = make (8.679799e-1)
    and d2 = make (4.260586) and d3 = make (-6.923267)

    and e0 = make (8.071648e-1) and e1 = make (1.189633e-1)
    and e2 = make (4.177702) and e3 = make (-9.162236)

    and f0 = make (-1.378278e-1) and f1 = make (-4.211369) and f2 = make (4.775187)
    and f3 = make (-1.026225e1) and f4 = make (8.399763) and f5 = make (-4.354000e-1)

    and g0 = make (-3.054956e1) and g1 = make (-4.132305e1) and g2 = make (3.292788e2)
    and g3 = make (-6.848038e2) and g4 = make (4.080244e2)

    and h0 = make (-1.05853e-1) and h1 = make (-5.776677e-1) and h2 = make (-1.672435e-2)
    and h3 = make (1.357256e-1) and h4 = make (2.172952e-1) and h5 = make (3.464156)
    and h6 = make (-2.835451) and h7 = make (-1.098104)

    and i0 = make (-4.126806e-1) and i1 = make (-1.189974e-1)
    and i2 = make (1.247721) and i3 = make (-7.391132e-1)

    and j0 = make (6.250437e-2) and j1 = make (6.067723e-1) and j2 = make (-1.101964)
    and j3 = make (9.100087) and j4 = make (-1.192672e1)

    and k0 = make (-1.463144e-1) and k1 = make (-4.07391e-2) and k2 = make (3.253159e-2)
    and k3 = make (4.851209e-1) and k4 = make (2.978850e-1) and k5 = make (-3.746393e-1)
    and k6 = make (-3.213068e-1)

    and l0 = make (2.635729e-2) and l1 = make (-2.192910e-2) and l2 = make (-3.152901e-3)
    and l3 = make (-5.817803e-2) and l4 = make (4.516159e-1) and l5 = make (-4.928702e-1)
    and l6 = make (-1.579864e-2)

    and m0 = make (-2.029370e-2) and m1 = make (4.660702e-2) and m2 = make (-6.012308e-1)
    and m3 = make (-8.062977e-2) and m4 = make (8.320429e-2) and m5 = make (5.018538e-1)
    and m6 = make (6.378864e-1) and m7 = make (4.226356e-1)

    and n0 = make (-5.19153) and n1 = make (-3.554716) and n2 = make (-3.598636e1)
    and n3 = make (2.247355e2) and n4 = make (-4.120991e2) and n5 = make (2.411750e2)

    and o0 = make (2.993363e-1) and o1 = make (6.594004e-2) and o2 = make (-2.003125e-1)
    and o3 = make (-6.233977e-2) and o4 = make (-2.107885) and o5 = make (2.141420)
    and o6 = make (8.476901e-1)

    and p0 = make (2.677652e-2) and p1 = make (-3.298246e-1) and p2 = make (1.926178e-1)
    and p3 = make (4.013325) and p4 = make (-4.404302)

    and q0 = make (-3.698756e-1) and q1 = make (-1.167551e-1) and q2 = make (-7.641297e-1)

    and r0 = make (-3.348717e-2) and r1 = make (4.276655e-2) and r2 = make (6.573646e-3)
    and r3 = make (3.535831e-1) and r4 = make (-1.373308) and r5 = make (1.237582)
    and r6 = make (2.302543e-1) and r7 = make (-2.512876e-1) and r8 = make (1.588105e-1)
    and r9 = make (-5.199526e-1)

    and s0 = make (-8.115894e-2) and s1 = make (-1.156580e-2) and s2 = make (2.514167e-2)
    and s3 = make (2.038748e-1) and s4 = make (-3.337476e-1) and s5 = make (1.004297e-1)
    in

    let cx0 = a0 + a1 * alpha + a2 * (pow de 2.) + a3 * de +
              a4 * alpha * de + a5 * (pow alpha 2.) + a6 * (pow alpha 3.)
    and cxq = b0 + b1 * alpha + b2 * (pow alpha 2.) + b3 * (pow alpha 3.) +
              b4 * (pow alpha 4.)
    and cy0 = c0 * beta + c1 * da + c2 * dr
    and cyp = d0 + d1 * alpha + d2 * (pow alpha 2.) + d3 * (pow alpha 3.)
    and cyr = e0 + e1 * alpha + e2 * (pow alpha 2.) + e3 * (pow alpha 3.)
    and cz0 = (f0 + f1 * alpha + f2 * (pow alpha 2.) + f3 * (pow alpha 3.) +
              f4 * (pow alpha 4.)) * ((make 1.) - (pow beta 2.)) + f5 * de
    and czq = g0 + g1 * alpha + g2 * (pow alpha 2.) + g3 * (pow alpha 3.) +
              g4 * (pow alpha 4.)
    and cl0 = h0 * beta + h1 * alpha * beta + h2 * (pow alpha 2.) * beta +
              h3 * (pow beta 2.) + h4 * alpha * (pow beta 2.) +
              h5 * (pow alpha 3.) * beta +
              h6 * (pow alpha 4.) * beta + h7 * (pow alpha 2.) * (pow beta 2.)
    and clp = i0 + i1 * alpha + i2 * (pow alpha 2.) + i3 * (pow alpha 3.)
    and clr = j0 + j1 * alpha + j2 * (pow alpha 2.) + j3 * (pow alpha 3.) +
              j4 * (pow alpha 4.)
    and clda = k0 + k1 * alpha + k2 * beta + k3 * (pow alpha 2.) +
               k4 * alpha * beta + k5 * (pow alpha 2.) * beta + k6 * (pow alpha 3.)
    and cldr = l0 + l1 * alpha + l2 * beta + l3 * alpha * beta +
               l4 * (pow alpha 2.) * beta + l5 * (pow alpha 3.) * beta +
               l6 * (pow beta 2.)
    and cm0 = m0 + m1 * alpha + m2 * de + m3 * alpha * de +
              m4 * (pow de 2.) + m5 * (pow alpha 2.) * de + m6 * (pow de 3.) +
              m7 * alpha * (pow de 2.)
    in

    let cmq = n0 + n1 * alpha + n2 * (pow alpha 2.) + n3 * (pow alpha 3.) +
              n4 * (pow alpha 4.) + n5 * (pow alpha 5.)
    and cn0 = o0 * beta + o1 * alpha * beta + o2 * (pow beta 2.) +
              o3 * alpha * (pow beta 2.) + o4 * (pow alpha 2.) * beta +
              o5 * (pow alpha 2.) * (pow beta 2.) + o6 * (pow alpha 3.) * beta
    and cnp = p0 + p1 * alpha + p2 * (pow alpha 2.) + p3 * (pow alpha 3.) +
              p4 * (pow alpha 4.)
    and cnr = q0 + q1 * alpha + q2 * (pow alpha 2.)
    and cnda = r0 + r1 * alpha + r2 * beta + r3 * alpha * beta +
               r4 * (pow alpha 2.) * beta + r5 * (pow alpha 3.) * beta +
               r6 * (pow alpha 2.) + r7 * (pow alpha 3.) + r8 * (pow beta 3.) +
               r9 * alpha * (pow beta 3.)
    and cndr = s0 + s1 * alpha + s2 * beta + s3 * alpha * beta +
               s4 * (pow alpha 2.) * beta + s5 * (pow alpha 2.)
    in do

        cx = cx0 + cxq * qhat
    and cy = cy0 + cyp * phat + cyr * rhat
    and cz = cz0 + czq * qhat
    and cl = cl0 + clp * phat + clr * rhat + clda * da + cldr * dr
    and cm = cm0 + cmq * qhat + cz * (xcgref - xcg)
    and cn = cn0 + cnp * phat + cnr * rhat + cnda * da + cndr * dr -
             cy * (xcgref - xcg) * (cbar / b)
    done

let stevensf16(alpha, beta, el, ail, rdr) =
    cxt, cyt, czt, clt, cmt, cnt where rec
    let dail = scale ail (1. /. 20.)
    and drdr = scale rdr (1. /. 30.) in
    do
        cxt = cx(alpha, el)
    and cyt = cy(beta, ail, rdr)
    and czt = cz(alpha, beta, el)
    and clt = cl(alpha, beta) + dlda(alpha, beta) * dail + dldr(alpha, beta) * drdr
    and cmt = cm(alpha, el)
    and cnt = cn(alpha, beta) + dnda(alpha, beta) * dail + dndr(alpha, beta) * drdr
    done
